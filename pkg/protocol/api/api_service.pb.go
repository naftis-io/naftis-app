// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: api/protoc/api/api_service.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_api_protoc_api_api_service_proto protoreflect.FileDescriptor

var file_api_protoc_api_api_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6f, 0x2e, 0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x1a, 0x36, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3e, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3c, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xdb,
	0x02, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x61, 0x66,
	0x74, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x61, 0x66, 0x74, 0x69,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x66, 0x74, 0x69,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6e, 0x61, 0x66, 0x74, 0x69, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_protoc_api_api_service_proto_goTypes = []interface{}{
	(*ScheduleWorkloadRequest)(nil),        // 0: io.naftis.api.ScheduleWorkloadRequest
	(*ListScheduledWorkloadsRequest)(nil),  // 1: io.naftis.api.ListScheduledWorkloadsRequest
	(*ListObservedWorkloadsRequest)(nil),   // 2: io.naftis.api.ListObservedWorkloadsRequest
	(*ScheduleWorkloadResponse)(nil),       // 3: io.naftis.api.ScheduleWorkloadResponse
	(*ListScheduledWorkloadsResponse)(nil), // 4: io.naftis.api.ListScheduledWorkloadsResponse
	(*ListObservedWorkloadsResponse)(nil),  // 5: io.naftis.api.ListObservedWorkloadsResponse
}
var file_api_protoc_api_api_service_proto_depIdxs = []int32{
	0, // 0: io.naftis.api.Api.ScheduleWorkload:input_type -> io.naftis.api.ScheduleWorkloadRequest
	1, // 1: io.naftis.api.Api.ListScheduledWorkloads:input_type -> io.naftis.api.ListScheduledWorkloadsRequest
	2, // 2: io.naftis.api.Api.ListObservedWorkloads:input_type -> io.naftis.api.ListObservedWorkloadsRequest
	3, // 3: io.naftis.api.Api.ScheduleWorkload:output_type -> io.naftis.api.ScheduleWorkloadResponse
	4, // 4: io.naftis.api.Api.ListScheduledWorkloads:output_type -> io.naftis.api.ListScheduledWorkloadsResponse
	5, // 5: io.naftis.api.Api.ListObservedWorkloads:output_type -> io.naftis.api.ListObservedWorkloadsResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_protoc_api_api_service_proto_init() }
func file_api_protoc_api_api_service_proto_init() {
	if File_api_protoc_api_api_service_proto != nil {
		return
	}
	file_api_protoc_api_schedule_workload_request_message_proto_init()
	file_api_protoc_api_schedule_workload_response_message_proto_init()
	file_api_protoc_api_list_scheduled_workloads_request_message_proto_init()
	file_api_protoc_api_list_scheduled_workloads_response_message_proto_init()
	file_api_protoc_api_list_observed_workloads_request_message_proto_init()
	file_api_protoc_api_list_observed_workloads_response_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_protoc_api_api_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_protoc_api_api_service_proto_goTypes,
		DependencyIndexes: file_api_protoc_api_api_service_proto_depIdxs,
	}.Build()
	File_api_protoc_api_api_service_proto = out.File
	file_api_protoc_api_api_service_proto_rawDesc = nil
	file_api_protoc_api_api_service_proto_goTypes = nil
	file_api_protoc_api_api_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	ScheduleWorkload(ctx context.Context, in *ScheduleWorkloadRequest, opts ...grpc.CallOption) (*ScheduleWorkloadResponse, error)
	ListScheduledWorkloads(ctx context.Context, in *ListScheduledWorkloadsRequest, opts ...grpc.CallOption) (*ListScheduledWorkloadsResponse, error)
	ListObservedWorkloads(ctx context.Context, in *ListObservedWorkloadsRequest, opts ...grpc.CallOption) (*ListObservedWorkloadsResponse, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) ScheduleWorkload(ctx context.Context, in *ScheduleWorkloadRequest, opts ...grpc.CallOption) (*ScheduleWorkloadResponse, error) {
	out := new(ScheduleWorkloadResponse)
	err := c.cc.Invoke(ctx, "/io.naftis.api.Api/ScheduleWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListScheduledWorkloads(ctx context.Context, in *ListScheduledWorkloadsRequest, opts ...grpc.CallOption) (*ListScheduledWorkloadsResponse, error) {
	out := new(ListScheduledWorkloadsResponse)
	err := c.cc.Invoke(ctx, "/io.naftis.api.Api/ListScheduledWorkloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListObservedWorkloads(ctx context.Context, in *ListObservedWorkloadsRequest, opts ...grpc.CallOption) (*ListObservedWorkloadsResponse, error) {
	out := new(ListObservedWorkloadsResponse)
	err := c.cc.Invoke(ctx, "/io.naftis.api.Api/ListObservedWorkloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	ScheduleWorkload(context.Context, *ScheduleWorkloadRequest) (*ScheduleWorkloadResponse, error)
	ListScheduledWorkloads(context.Context, *ListScheduledWorkloadsRequest) (*ListScheduledWorkloadsResponse, error)
	ListObservedWorkloads(context.Context, *ListObservedWorkloadsRequest) (*ListObservedWorkloadsResponse, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) ScheduleWorkload(context.Context, *ScheduleWorkloadRequest) (*ScheduleWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleWorkload not implemented")
}
func (*UnimplementedApiServer) ListScheduledWorkloads(context.Context, *ListScheduledWorkloadsRequest) (*ListScheduledWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledWorkloads not implemented")
}
func (*UnimplementedApiServer) ListObservedWorkloads(context.Context, *ListObservedWorkloadsRequest) (*ListObservedWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObservedWorkloads not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_ScheduleWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ScheduleWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.naftis.api.Api/ScheduleWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ScheduleWorkload(ctx, req.(*ScheduleWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListScheduledWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListScheduledWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.naftis.api.Api/ListScheduledWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListScheduledWorkloads(ctx, req.(*ListScheduledWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListObservedWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObservedWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListObservedWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.naftis.api.Api/ListObservedWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListObservedWorkloads(ctx, req.(*ListObservedWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.naftis.api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleWorkload",
			Handler:    _Api_ScheduleWorkload_Handler,
		},
		{
			MethodName: "ListScheduledWorkloads",
			Handler:    _Api_ListScheduledWorkloads_Handler,
		},
		{
			MethodName: "ListObservedWorkloads",
			Handler:    _Api_ListObservedWorkloads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protoc/api/api_service.proto",
}
